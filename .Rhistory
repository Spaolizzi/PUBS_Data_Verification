##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot)
##First things first: load data. Eventually ask nate for find.unproccessed code
setwd("~/github_repos/PUBS_Data_Verification/")
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
#drop rows that aren't currently useful
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName))
##long pipe for tidying data
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
subjects <- unique(distinct$subject)
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0))
subjects <- unique(distinct$subject)
##create plot for responsexreversal?
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(!trial_response == "noresponse")) %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse"))
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
distinct <- as.numeric(reversal_data) %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
gplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)]))
ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point"))
View(distinct)
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)
)
View(distinct)
subjects <- unique(distinct$subject)
##create plot for responsexreversal?
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA))
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0))
##create plot for responsexreversal?
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal"))
ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0))
subjects <- unique(distinct$subject)
##create plot for responsexreversal?
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
##dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
