mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100)
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount >2.50, Amount/100, Amount)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0))
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J"))
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount >2.50, Amount/100, Amount)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = Amount*Correct)
<- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
for_payment
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount >2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(1)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0))
for_payment
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount >2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0))
for_payment
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(RandomID = subject)
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(RandomID = subject)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID)
for_payment
full_join(for_payment, reversal_earnings, cannon_earnings, by = "subject")
class(for_payment$subject)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as_numeric(subject))
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as_numeric(subject))
full_join(for_payment, reversal_earnings, cannon_earnings, by = "subject")
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as_numeric(subject))
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount > 2.50, Amount/100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as.numeric(subject))
full_join(for_payment, reversal_earnings, cannon_earnings, by = "subject")
payment <-full_join(for_payment, reversal_earnings, cannon_earnings, by = "subject")
View(cannon_earnings)
qualtrics_earnings <- for_payment %>% select(subject, true_payout)
payment <- full_join(qualtrics_earnings, reversal_earnings, cannon_earnings, by = "subject")
payment
cannon_earnings
payment <- left_join(qualtrics_earnings, reversal_earnings, cannon_earnings, by = "subject")
payment
payment <- left_join(payment, cannon_earnings, by = "subject")
payment
payment$total <- payment$true_payout + payment$centsearned_c + payment$centsearned_r
payment
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount < 2.50, Amount*100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as.numeric(subject))
qualtrics_earnings <- for_payment %>% select(subject, true_payout)
payment <- left_join(qualtrics_earnings, reversal_earnings, by = "subject")
payment <- left_join(payment, cannon_earnings, by = "subject")
payment$total <- payment$true_payout + payment$centsearned_c + payment$centsearned_r
$total <- payment$true_payout + payment$centsearned_c + payment$centsearned_r
payment
payment$total <- (payment$true_payout + payment$centsearned_c + payment$centsearned_r)/100
payment
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp, Duration_minss)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount < 2.50, Amount*100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as.numeric(subject))
qualtrics_earnings <- for_payment %>% select(subject, true_payout, Duration_minss)
payment <- left_join(qualtrics_earnings, reversal_earnings, by = "subject")
payment <- left_join(payment, cannon_earnings, by = "subject")
payment$total <- (payment$true_payout + payment$centsearned_c + payment$centsearned_r)/100
payment
sum(payment$total)
mean(payment$total)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("/Users/lab/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("/Users/lab/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
rts <- list()
for (i in subjects) {
s <- reversal %>% dplyr::filter(subject == i)
rt_hist <- ggplot(s, aes(trial_latency), stat = "bin") + geom_histogram() + ggtitle(i)
rts[[i]] <- rt_hist
}
subjects <- as.character(unique(reversal$subject)); cowplot_list <- list(); plot_subjects <- list()
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(1)], "white") ##potentially save these as bad_blocks vector
tab <- obj %>% flextable() %>% flextable::bg(j = 1:10, bg=colormatrix)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("/Users/lab/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE) %>% group_by(subject) %>% filter(n() >= 200)
reversal <- tidy_reversal(reversal_data)
reversal <- create_vars_reversal(reversal)
obj <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
Number_correct = max(numbercorrect),
NumberofTrials_Phase = max(phase_trialnum )) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[81] <- "Means"
#save(distinct, obj, file = "Reversal_Task_Cleaned.Rdata")
subjects <- as.character(unique(reversal$subject)); cowplot_list <- list(); plot_subjects <- list()
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(1)], "white") ##potentially save these as bad_blocks vector
tab <- obj %>% flextable() %>% flextable::bg(j = 1:10, bg=colormatrix)
reversal_earnings <- reversal %>% group_by(subject) %>% summarize(cents_earned = max(totalearnings)) %>% dplyr::rename(centsearned_r = cents_earned)
save(reversal_earnings, file = "Payment/Reversal.Rdata")
sink("/dev/null")
tab
sink();
rts <- list()
for (i in subjects) {
s <- reversal %>% dplyr::filter(subject == i)
rt_hist <- ggplot(s, aes(trial_latency), stat = "bin") + geom_histogram() + ggtitle(i)
rts[[i]] <- rt_hist
}
rts <- list()
for (i in subjects) {
s <- reversal %>% dplyr::filter(subject == i)
rt_hist <- ggplot(s, aes(trial_latency), stat = "bin") + geom_histogram() + ggtitle(i)
rts[[i]] <- rt_hist
}
rts
View(rts)
rts[[length(rts) + 1]] <- rt_hist <- ggplot(reversal, aes(trial_latency), stat = "bin") + geom_histogram() + ggtitle(i)
rts <- list()
for (i in subjects) {
s <- reversal %>% dplyr::filter(subject == i)
rt_hist <- ggplot(s, aes(trial_latency), stat = "bin") + geom_histogram() + ggtitle(i)
rts[[i]] <- rt_hist
}
rts[[length(rts) + 1]] <- rt_hist <- ggplot(reversal, aes(trial_latency), stat = "bin") + geom_histogram() + ggtitle("Overall RTs")
rts[length(rts)]
obj <- reversal %>% group_by(subject,  task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
Number_correct = max(numbercorrect),
NumberofTrials_Phase = max(phase_trialnum )) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[81] <- "Means"
obj$subject[22] <- "Means"
obj <- reversal %>% group_by(subject,  task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
Number_correct = max(numbercorrect),
NumberofTrials_Phase = max(phase_trialnum )) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[22] <- "Means"
obj$subject[21] <- "Means"
subjects <- as.character(unique(reversal$subject)); cowplot_list <- list(); plot_subjects <- list()
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(1)], "white") ##potentially save these as bad_blocks vector
tab <- obj %>% flextable() %>% flextable::bg(j = 1:10, bg=colormatrix)
subjects <- as.character(unique(reversal$subject)); cowplot_list <- list(); plot_subjects <- list()
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(1)], "white") ##potentially save these as bad_blocks vector
tab <- obj %>% flextable() %>% flextable::bg(j = 1:9, bg=colormatrix)
reversal_earnings <- reversal %>% group_by(subject) %>% summarize(cents_earned = max(totalearnings)) %>% dplyr::rename(centsearned_r = cents_earned)
save(reversal_earnings, file = "Payment/Reversal.Rdata")
sink("/dev/null")
tab
sink();
by_phase <- by_block_phase %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(avg_latency),
reached_criterion = mean(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
Number_correct = sum(Number_correct),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
Number_correct = max(numbercorrect),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(by_block_phase[sapply(by_block_phase, is.numeric)])
by_block_phase <- rbind(by_block_phase, stats)
by_block_phase$subject[81] <- "Means"
by_phase <- by_block_phase %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(avg_latency),
reached_criterion = mean(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
Number_correct = sum(Number_correct),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- by_block_phase %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(avg_latency),
reached_criterion = mean(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
Number_correct = sum(Number_correct),
NumberofTrials_Phase = sum(NumberofTrials_Phase))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
View(by_phase)
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
Number_correct = max(numbercorrect),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- by_block_phase %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(avg_latency),
reached_criterion = mean(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
Number_correct = sum(Number_correct),
NumberofTrials_Phase = sum(NumberofTrials_Phase))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(by_phase[sapply(by_phase, is.numeric)])
by_phase <- rbind(by_phase, stats)
by_phase$subject[21] <- "Means"
stats <- colMeans(by_block_phase[sapply(by_block_phase, is.numeric)])
by_block_phase <- rbind(by_block_phase, stats)
by_block_phase$subject[81] <- "Means"
#save(distinct, by_block_phase, file = "Reversal_Task_Cleaned.Rdata")
View(by_phase)
View(reversal)
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(avg_latency),
reached_criterion = mean(as.numeric(trial_latency)),
percent_correct_phase = mean(percent_correct_phase),
NumberofTrials_Phase = sum(NumberofTrials_Phase))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
NumberofTrials_Phase = sum(NumberofTrials_Phase))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(by_phase[sapply(by_phase, is.numeric)])
by_phase <- rbind(by_phase, stats)
by_phase$subject[21] <- "Means"
stats <- colMeans(by_block_phase[sapply(by_block_phase, is.numeric)])
by_block_phase <- rbind(by_block_phase, stats)
by_block_phase$subject[81] <- "Means"
#save(distinct, by_block_phase, file = "Reversal_Task_Cleaned.Rdata")
View(by_block_phase)
View(by_phase)
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(by_block[sapply(by_block, is.numeric)])
by_block <- rbind(by_block, stats)
by_block$subject[21] <- "Means"
stats <- colMeans(by_phase[sapply(by_phase, is.numeric)])
by_phase <- rbind(by_phase, stats)
by_phase$subject[21] <- "Means"
stats <- colMeans(by_block_phase[sapply(by_block_phase, is.numeric)])
by_block_phase <- rbind(by_block_phase, stats)
by_block_phase$subject[81] <- "Means"
#save(distinct, by_block_phase, file = "Reversal_Task_Cleaned.Rdata")
View(by_block)
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
reversal_number = (max(reversal_number)),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
reversal_number = (max(reversalnumber)),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(by_block[sapply(by_block, is.numeric)])
by_block <- rbind(by_block, stats)
by_block$subject[21] <- "Means"
stats <- colMeans(by_phase[sapply(by_phase, is.numeric)])
by_phase <- rbind(by_phase, stats)
by_phase$subject[21] <- "Means"
stats <- colMeans(by_block_phase[sapply(by_block_phase, is.numeric)])
by_block_phase <- rbind(by_block_phase, stats)
by_block_phase$subject[81] <- "Means"
#save(distinct, by_block_phase, file = "Reversal_Task_Cleaned.Rdata")
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_block_phase <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
Consecutive_Correct = max(ConsecutiveCorrect),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(reached_criterion >= 10, "Above", "Below"))
by_block <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(numbercorrect)/50,
reversal_number = (max(reversalnumber)),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
by_phase <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(trial_latency)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = mean(percent_correct_phase),
NumberofTrials_Phase = max(phase_trialnum))%>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
stats <- colMeans(by_block[sapply(by_block, is.numeric)])
by_block <- rbind(by_block, stats)
by_block$subject[21] <- "Means"
stats <- colMeans(by_phase[sapply(by_phase, is.numeric)])
by_phase <- rbind(by_phase, stats)
by_phase$subject[21] <- "Means"
stats <- colMeans(by_block_phase[sapply(by_block_phase, is.numeric)])
by_block_phase <- rbind(by_block_phase, stats)
by_block_phase$subject[81] <- "Means"
#save(distinct, by_block_phase, file = "Reversal_Task_Cleaned.Rdata")
length(reversal %>% filter(subject = 455))
length(reversal %>% filter(subject == 455))
reversal %>% filter(subject == 455)
nrow(reversal %>% filter(subject == 455))
View(reversal_data)
test <- reversal_data %>% filter(subject == 455)
unique(test$time)
455_1 <- test %>% filter(time == "18:47:13")
455.1 <- test %>% filter(time == "18:47:13")
456 <- test %>% filter(time == "18:47:13")
456 <- test %>% filter(time == "18:47:13")
rev_456 <- test %>% filter(time == "18:47:13")
reversal %>% ifelse(time == "18:47:13", subject == 456)
reversal %>% ifelse(time = "18:47:13", subject = 456)
reversal %>% mutate(subject, ifelse(time = "18:47:13", subject = 456, subject))
reversal_data %>% mutate(subject, ifelse(time = "18:47:13", subject = 456, subject))
reversal_data %>% mutate(subject, ifelse(time = "18:47:13", subject = 456, subject))
reversal_data %>% mutate(subject, subject = ifelse(time = "18:47:13", subject = 456, subject))
reversal_data %>%  mutate(subject, subject = ifelse(time = "18:47:13", 456, subject))
reversal_data %>% mutate(subject = ifelse(time = "18:47:13", 456, subject))
table(test$time)
reversal_data %>% mutate(subject = ifelse(time = 18:47:13, 456, subject))
reversal_data %>% mutate(subject = ifelse(time == 18:47:13, 456, subject))
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == 18:47:13, 456, subject))
reversal <- tidy_reversal(reversal_data)
View(reversal_data)
table(reversal_data$subject)
table(reversal_data$time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == 18:47:13, 456, subject))
