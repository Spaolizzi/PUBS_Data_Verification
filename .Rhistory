##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure_Check_9.27.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
if (summary == "by_block_phase"){
obj <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(percent_correct_phase),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(reached_criterion >= 10, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_block"){
obj <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(numbercorrect)/50,
reversal_number = (max(reversalnumber)),
NumberofTrials = n())%>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_phase"){
obj <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
NumberofTrials = n(),
NumberCorrect = max(cumsum(isResponse_num)),
percent_correct = NumberCorrect/NumberofTrials) %>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
#save(distinct, obj, file = "Reversal_Task_Cleaned.Rdata")
subjects <- as.character(unique(reversal$subject)); cowplot_list <- list(); plot_subjects <- list()
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(1)], "white") ##potentially save these as bad_blocks vector
tab <- obj %>% flextable() %>% flextable::bg(j = 1:ncol(obj), bg=colormatrix)
reversal_earnings <- reversal %>% group_by(subject) %>% summarize(cents_earned = max(totalearnings)) %>% dplyr::rename(centsearned_r = cents_earned)
save(reversal_earnings, file = "Payment/Reversal.Rdata")
sink("/dev/null")
tab
sink();
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure_Check_9.27.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
if (summary == "by_block_phase"){
obj <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(percent_correct_phase),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(reached_criterion >= 10, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_block"){
obj <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(numbercorrect)/50,
reversal_number = (max(reversalnumber)),
NumberofTrials = n())%>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_phase"){
obj <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
NumberofTrials = n(),
NumberCorrect = max(cumsum(isResponse_num)),
percent_correct = NumberCorrect/NumberofTrials) %>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
#save(distinct, obj, file = "Reversal_Task_Cleaned.Rdata")
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure_Check_9.27.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
if (summary == "by_block_phase"){
obj <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(percent_correct_phase),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(reached_criterion >= 10, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_block"){
obj <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(numbercorrect)/50,
reversal_number = (max(reversalnumber)),
NumberofTrials = n())%>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_phase"){
obj <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
NumberofTrials = n(),
NumberCorrect = max(cumsum(isResponse_num)),
percent_correct = NumberCorrect/NumberofTrials) %>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
#save(distinct, obj, file = "Reversal_Task_Cleaned.Rdata")
View(reversal)
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
if (summary == "by_block_phase"){
obj <- reversal %>% group_by(subject, block_number, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(percent_correct_phase),
NumberofTrials = max(trial_number))%>%
mutate(above_threshold = ifelse(reached_criterion >= 10, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_block"){
obj <- reversal %>% group_by(subject, block_number) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct = max(numbercorrect)/50,
reversal_number = (max(reversalnumber)),
NumberofTrials = n())%>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
if (summary == "by_phase"){
obj <- reversal %>% group_by(subject, task_phase) %>%
summarise(avg_latency = mean(as.numeric(rt)),
reached_criterion = min(reached_criterion, na.rm=TRUE),
NumberofTrials = n(),
NumberCorrect = max(cumsum(isResponse_num)),
percent_correct = NumberCorrect/NumberofTrials) %>%
mutate(above_threshold = ifelse(percent_correct >= .50, "Above", "Below"))
stats <- colMeans(obj[sapply(obj, is.numeric)])
obj <- rbind(obj, stats)
obj$subject[nrow(obj)] <- "Means"
}
#save(distinct, obj, file = "Reversal_Task_Cleaned.Rdata")
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
View(reversal)
View(reversal)
colnames(reversal)
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
View(reversal)
reversal <- create_vars_reversal(reversal)
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
View(reversal_data)
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
View(reversal)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, data.table)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#reversal_data_8.16 <- data.table::fread("~/github_repos/ReversalTask/Reversal_pilot_mTurk.csv", fill = TRUE)
#load data
#load("Reversal_Task_Cleaned.Rdata")
reversal_data <- data.table::fread("~/github_repos/ReversalTask/PUBS_Structure.csv", fill = TRUE) %>% group_by(subject, time)
reversal_data <- reversal_data %>% mutate(subject = ifelse(time == "18:47:13", 456, subject))
subjects <- unique(reversal_data$subject)
summary <- "by_block_phase" #by_block, by_phase, by_block_phase
trim_cols <- TRUE
reversal <- tidy_reversal(reversal_data)
check_tidy(reversal)
# bad <- c()
# for(i in 1:nrow(check_tidy)){
#   if(count > 1){
#     bad[nrow(check_tidy)] <- i
#   }
# }
reversal <- create_vars_reversal(reversal)
View(reversal)
setwd("~/github_repos/PUBS_Data_Verification/")
pacman::p_load(R.matlab)
res <- readMat("logistic_demo.mat")
#res$binX <- res$binX[res$sel==1,]
#res$anyUp <- res$anyUp[res$sel==1]
df_applysel <- as.data.frame(cbind(res$anyUp, res$binX, res$sel)) %>% setNames(c("anyUp", "blockCond", "modRU","modSurp", "blockCondxmodSurp", "hit", "sel")) %>% filter(!sel == "0") %>% round(digits = 15)
fit <- glm(anyUp ~ blockCond + modRU + modSurp + blockCondxmodSurp + hit, df_applysel, family=binomial, maxit = 1000)
summary(fit)
fit$coefficients
resid_compare <- cbind(as.data.frame(res$STATS[11]), as.data.frame(fit$residuals)) %>% setNames(c("matlab", "R"))
coeff_compare <- cbind(as.data.frame(res$STATS[1]), as.data.frame(fit$coefficients)) %>% setNames(c("matlab", "R"))
se_compare <- cbind(as.data.frame(res$STATS[7]), as.data.frame(fit$model)) %>% setNames(c("matlab", "R"))
pacman::p_load(R.matlab, tidyverse)
res <- readMat("logistic_demo.mat")
#res$binX <- res$binX[res$sel==1,]
#res$anyUp <- res$anyUp[res$sel==1]
df_applysel <- as.data.frame(cbind(res$anyUp, res$binX, res$sel)) %>% setNames(c("anyUp", "blockCond", "modRU","modSurp", "blockCondxmodSurp", "hit", "sel")) %>% filter(!sel == "0") %>% round(digits = 15)
fit <- glm(anyUp ~ blockCond + modRU + modSurp + blockCondxmodSurp + hit, df_applysel, family=binomial, maxit = 1000)
summary(fit)
wt_compare <- cbind(as.data.frame(res$STATS[15]), as.data.frame(fit$weights)) %>% setNames(c("matlab", "R"))
resid_compare <- cbind(as.data.frame(res$STATS[11]), as.data.frame(fit$residuals)) %>% setNames(c("matlab", "R"))
coeff_compare <- cbind(as.data.frame(res$STATS[1]), as.data.frame(fit$coefficients)) %>% setNames(c("matlab", "R"))
wt_compare <- cbind(as.data.frame(res$STATS[15]), as.data.frame(fit$weights)) %>% setNames(c("matlab", "R"))
View(resid_compare)
View(wt_compare)
View(coeff_compare)
resid_compare <- cbind(as.data.frame(res$STATS[11]), as.data.frame(fit$residuals)) %>%
setNames(c("matlab", "R")) %>% mutate(Logical = ifelse (matlab != R, FALSE, TRUE))
View(resid_compare)
coeff_compare <- cbind(as.data.frame(res$STATS[1]), as.data.frame(fit$coefficients)) %>%
setNames(c("matlab", "R")) %>% mutate(Logical = ifelse (matlab != R, FALSE, TRUE))
wt_compare <- cbind(as.data.frame(res$STATS[15]), as.data.frame(fit$weights)) %>%
setNames(c("matlab", "R")) %>% mutate(Logical = ifelse (matlab != R, FALSE, TRUE))
View(res)
View(coeff_compare)
View(wt_compare)
View(res)
View(coeff_compare)
coeff_compare$matlab
coeff_compare$R
class(coeff_compare$matlab)
class(coeff_compare$R)
View(df_applysel)
View(df_applysel)
apply(df_applysel, 2, mean)
apply(df_applysel, 2, sd)
table(df_applysel$anyUp)
fit <- glm(anyUp ~ blockCond + modRU + modSurp + blockCondxmodSurp + hit, df_applysel, family=binomial, maxit = 1000)
summary(fit)
table(df_applysel$hit)
logLik(fit)
fit <- glm(anyUp ~ blockCond + modRU + modSurp + blockCondxmodSurp, df_applysel, family=binomial, maxit = 1000)
summary(fit)
fit <- glm(anyUp ~ blockCond + modRU + modSurp + blockCondxmodSurp + factor(hit), df_applysel, family=binomial, maxit = 1000)
summary(fit)
?glm
