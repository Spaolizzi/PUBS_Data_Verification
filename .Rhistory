"block.InstructionBlock.timestamp","trial.begin_block.timestamp",
"trial.mainloop.timestamp","trial.placeshield_mouse.timestamp","trial.showPE.timestamp"
,"trial.cannon_outcome.timestamp","picture.shield.currentitem")
cannon_data <- cannon_data[,!(names(cannon_data) %in% drop)]
}
cannon_data <- check_irreg(cannon_data) #check for any mistaken hits
irreg_plot_hit <- cannon_data %>% filter(grepl("CHECK_HIT", Irreg)) %>% select(subject, cond, blocknum, trialnum, catch_miss, angmu, placementAngle, outcome, predErr, angleup, angledown, shield_size, Irreg )
irreg_plot_miss <- cannon_data %>% filter(grepl("CHECK_MISS", Irreg)) %>% select(subject, cond, blocknum, trialnum, catch_miss, angmu, placementAngle, outcome, predErr, angleup, angledown, shield_size, Irreg )
irreg_plot_NA <- cannon_data %>% filter(grepl("CHECK_NA", Irreg)) %>% select(subject, cond, blocknum, trialnum, catch_miss, angmu, placementAngle, outcome, predErr, angleup, angledown, shield_size, Irreg)
obj <- cannon_data %>% group_by(subject, cond, blocknum, totalearnings) %>%
summarise(obscount = n(), avg_PE = mean(predErr, na.rm = TRUE),
dist_mean = mean(distMean,na.rm = TRUE),
percent_caught = max(cannonballs_caught/max(trialnum)),
percent_noresp = (sum(outcomeindex == 1)/max(trialnum))) %>%
arrange(subject,totalearnings) %>% group_by(subject) %>% mutate(taskearnings = max(totalearnings)) %>% mutate(Avg_overall_PE = mean(avg_PE, na.rm = TRUE)) %>% ungroup()
save(obj, cannon_data, file = "Cannonball_Pilot_Example_Perfect_Data.Rdata")
colormatrix <- ifelse(obj$percent_noresp >= .2, wes_palette("Cavalcanti1")[c(1)], "white") ##potentially save these as bad_blocks vector
bad_blocks <- obj %>% dplyr::filter(percent_noresp >= .2)
tab <- obj %>% flextable() %>% bg(j = 1:10, bg=colormatrix)
cannon_earnings <- cannon_data %>% group_by(subject) %>% summarize(cents_earned = max(totalearnings)) %>% dplyr::rename(centsearned_c = cents_earned)
save(cannon_earnings, file = "Payment/Cannon.Rdata")
tab
Hist_outliers <- ggplot(cannon_data, aes(x=trial.placeshield_mouse.latency)) + geom_histogram()
Mean_cleaned <- cannon_data %>% ungroup () %>% filter(!trial.placeshield_mouse.latency == 2500) %>% summarise(mean = mean(trial.placeshield_mouse.latency))
Hist_outliers; Mean_cleaned
oddball_PE <- list();changepoint_PE <- list();oddball_DM <- list(); changepoint_DM <- list()
subjects <- as.character(unique(cannon_data$subject))
subjects_list <- list(as.character(unique(cannon_data$subject)))
for (i in subjects) {
o <- cannon_data %>% dplyr::filter(subject == i & cond == "ODDBALL")
oddballPE <- ggplot(o, aes(x=trialnum, y=predErr, color = catch_miss)) +
geom_point() +
geom_vline(aes(xintercept = changepoint, color = "Oddball")) + scale_color_manual(values = (wes_palette("Cavalcanti1")[c(2,5,1,4)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~blocknum)
oddball_PE[[i]] <- oddballPE
oddballDM <- ggplot(o, aes(x=trialnum, y=distMean, color = catch_miss)) +
geom_point() +
geom_vline(aes(xintercept = changepoint, color = "Oddball")) + scale_color_manual(values = (wes_palette("Cavalcanti1")[c(2,5,1,4)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~blocknum)
oddball_DM[[i]] <- oddballDM
tryCatch(plot(oddballDM), error=function(e) { save(oddballDM, o, i, file="problematic_data.RData"); return(NULL)})
c <- cannon_data %>% dplyr::filter(subject == i & cond == "CHANGEPOINT")
changepointPE <- ggplot(c,aes(x=trialnum, y=predErr, color = catch_miss)) + geom_point() +
geom_vline(aes(xintercept = changepoint, color = "Changepoint")) + scale_color_manual(values = (wes_palette("Cavalcanti1")[c(4,2,5,1)]))  +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~blocknum)
changepoint_PE[[i]] <- changepointPE
changepointDM <- ggplot(c, aes(x=trialnum, y=distMean, color = catch_miss)) +
geom_point() +
geom_vline(aes(xintercept = changepoint, color = "Changepoint")) + scale_color_manual(values = (wes_palette("Cavalcanti1")[c(4,2,1,5)]))  +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~blocknum)
changepoint_DM[[i]] <- changepointDM
}
#changepoint_PE; changepoint_DM; oddball_DM; oddball_PE
View(cannon_data)
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#load data
#cannon_data_8.16 <- data.table::fread("pubs_pilot_cannon_task_finaldraft_8.16.20_raw_21_08_17.csv", fill = TRUE)
cannon_data_8.28 <- data.table::fread("~/github_repos/Cannon_Task_Inquisit/New_format_check.csv", fill = TRUE)
load("cannon_processing.Rdata")
#load("Cannonball_Pilot_Cleaned_Data.Rdata")
View(cannon_data_8.28)
plot_print <- "all" # could be "random"
reconcile_names <- c(NA)
for(i in 1:length(model_names)){
if (!is.element(model_names[i], iq_names)) {
reconcile_names <- append(reconcile_names, model_names[i], after = length(reconcile_names))
}
}
cannon_data <- tidy_cannon(cannon_data_8.28) ## transforms raw data into workable dataframe
check_tidy(cannon_data) # found double subject
cannon_data <- cannon_data %>% mutate(subject = ifelse(time == "18:52:12", 456, subject)) %>% filter(subject != "456")
View(cannon_data)
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#load data
#cannon_data_8.16 <- data.table::fread("pubs_pilot_cannon_task_finaldraft_8.16.20_raw_21_08_17.csv", fill = TRUE)
cannon_data_8.28 <- data.table::fread("~/github_repos/Cannon_Task_Inquisit/New_format_check.csv", fill = TRUE)
load("cannon_processing.Rdata")
#load("Cannonball_Pilot_Cleaned_Data.Rdata")
plot_print <- "all" # could be "random"
reconcile_names <- c(NA)
for(i in 1:length(model_names)){
if (!is.element(model_names[i], iq_names)) {
reconcile_names <- append(reconcile_names, model_names[i], after = length(reconcile_names))
}
}
cannon_data <- tidy_cannon(cannon_data_8.28) ## transforms raw data into workable dataframe
check_tidy(cannon_data) # found double subject
cannon_data <- cannon_data %>% mutate(subject = ifelse(time == "18:52:12", 456, subject)) %>% filter(subject != "456")
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#load data
#cannon_data_8.16 <- data.table::fread("pubs_pilot_cannon_task_finaldraft_8.16.20_raw_21_08_17.csv", fill = TRUE)
cannon_data_8.28 <- data.table::fread("~/github_repos/Cannon_Task_Inquisit/New_format_check.csv", fill = TRUE)
load("cannon_processing.Rdata")
#load("Cannonball_Pilot_Cleaned_Data.Rdata")
cannon_data <- tidy_cannon(cannon_data_8.28) ## transforms raw data into workable dataframe
check_tidy(cannon_data) # found double subject
cannon_data <- cannon_data %>% mutate(subject = ifelse(time == "18:52:12", 456, subject)) %>% filter(subject != "456")
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#load data
#cannon_data_8.16 <- data.table::fread("pubs_pilot_cannon_task_finaldraft_8.16.20_raw_21_08_17.csv", fill = TRUE)
cannon_data_8.28 <- data.table::fread("~/github_repos/Cannon_Task_Inquisit/New_format_check.csv", fill = TRUE)
load("cannon_processing.Rdata")
#load("Cannonball_Pilot_Cleaned_Data.Rdata")
cannon_data <- tidy_cannon(cannon_data_8.28) ## transforms raw data into workable dataframe
check_tidy(cannon_data) # found double subject
cannon_data <- cannon_data %>% mutate(subject = ifelse(time == "18:52:12", 456, subject)) %>% filter(subject != "456")
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_functions_PUBS.R")
#load data
#cannon_data_8.16 <- data.table::fread("pubs_pilot_cannon_task_finaldraft_8.16.20_raw_21_08_17.csv", fill = TRUE)
cannon_data_8.28 <- data.table::fread("~/github_repos/Cannon_Task_Inquisit/New_format_check.csv", fill = TRUE)
load("cannon_processing.Rdata")
#load("Cannonball_Pilot_Cleaned_Data.Rdata")
cannon_data <- tidy_cannon(cannon_data_8.28) ## transforms raw data into workable dataframe
check_tidy(cannon_data) # found double subject
cannon_data <- cannon_data %>% mutate(subject = ifelse(time == "18:52:12", 456, subject)) %>% filter(subject != "456")
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
set_vars <- c("predErr", "distMean", "catch_miss", "changepoint", "perf" ) ##name variables needed for analysis, add as they become apparent
trim_cols <- TRUE
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
cannon_data <- create_vars(cannon_data, set_vars) ## Intialize rows to calculate
data <- cannon_data
if("perf" %in% set_vars) {
data['perf'] <- NA
for(r in 1:nrow(data)){
if(is.na(data$outcomeindex[r])){
data$perf[r] <- 0
} else if(is.na(data$outcomeindex[r])){
data$perf[r] <- 0
} else if(data$outcomeindex[r] == 5) {
data$perf[r] <- .5
} else {
data$perf[r] <- 0
}
}
}
if("predErr" %in% set_vars) {
data['predErr'] <- NA
for(r in 1:nrow(data)){
if(is.na(data$placementAngle[r])){
data$predErr[r] <- NA
} else if (is.na(data$outcome[r])){
data$predErr[r] <- NA
} else {
data$predErr[r] <- discrep(data$outcome[r], data$placementAngle[r])
}
}
}
class(cannon_data$outcome)
summary(cannon_data)
sapply(class(cannon_data))
sapply(class(cols(cannon_data)))
sapply(class, cannon_data)
sapply(class, cannon_data)
sapply(cannon_data, class)
View(cannon_data)
cols.char <- c("cond", "condcolor")
data[cols.num] <- sapply(data[! cols.char],as.numeric)
sapply(data, class)
cols.char <- c("cond", "condcolor")
data[cols.num] <- sapply(data[!cols.char],as.numeric)
sapply(data, class)
cols.char <- c("cond", "condcolor")
data[cols.num] <- sapply(data[-cols.char],as.numeric)
sapply(data, class)
warnings()
earnings <- earnings %>% mutate(total = (centsearned_r + centsearned_c)/100)
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
setwd("~/github_repos/PUBS_Data_Verification/Payment/")
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
setwd("~/github_repos/PUBS_Data_Verification/")
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics$`Duration_mins <- qualtrics$`Duration (in seconds)`/60
qualtrics$Duration_mins <- qualtrics$`Duration (in seconds)`/60
qualtrics<- qualtrics %>%  mutate(Duration_mins = `Duration (in seconds)`/60)
qualtrics<- qualtrics %>%  mutate(Duration_mins = `Duration (in seconds)`)
qualtrics<- qualtrics %>%  mutate(Duration_mins = Duration_mins/60)
qualtrics<- qualtrics %>%  mutate(Duration_mins = as.numeric(`Duration (in seconds)`)/60)
qualtrics <- arrange(qualtrics,Duration_minss)
View(qualtrics)
qualtrics_payment <- qualtrics %>% arrange(qualtrics,Duration_minss) %>% select(Duration_minss, RandomID, Progress)
View(qualtrics_payment)
qualtrics_randomdraw <- qualtrics %>% dplyr::select(., contains("_select")) %>% select(!contains("Click")) %>% select(!contains("submit"))
View(qualtrics_randomdraw)
qualtrics$payout_colnum <- NA
qualtrics$payout_colname <- NA
qualtrics$payout_resp <- NA
for(i in 1:nrow(qualtrics)){
coln<- floor(runif(1, min=2, max=60))
element <- i
qualtrics$payout_colnum[i] <- coln
qualtrics$payout_colname[i] <- colnames(qualtrics_randomdraw[coln])
}
qualtrics$payout_resp <- unlist(qualtrics_randomdraw[i, qualtrics$payout_col])
for_payment <-qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp, Duration_minss)
for_payment <- for_payment %>% separate(payout_colname, into = c("Likelihood", "Amount"), sep = "_", extra = "drop") %>%
mutate(Answer = ifelse(grepl("L", Amount), "F", "J")) %>%
mutate(Side = str_sub(Amount, -1)) %>%
mutate(Likelihood = as.numeric(Likelihood)/100) %>%
mutate(Amount = as.numeric(str_sub(Amount, start = 1, end =-2))) %>%
mutate(Amount = ifelse(Amount < 2.50, Amount*100, Amount)) %>%
mutate(Probability = runif(10)) %>%
mutate(Correct = ifelse(payout_resp == Answer, 1, 0)) %>% mutate(true_payout = ifelse(Probability < Likelihood, Amount*Correct, 0)) %>%
rename(subject = RandomID) %>% mutate(subject = as.numeric(subject))
qualtrics_earnings <- for_payment %>% select(subject, true_payout, Duration_minss)
payment <- left_join(qualtrics_earnings, reversal_earnings, by = "subject")
payment <- left_join(payment, cannon_earnings, by = "subject")
payment$total <- (payment$true_payout + payment$centsearned_c + payment$centsearned_r)/100
qualtrics_payment <- qualtrics %>% arrange(qualtrics,Duration_minss) %>% select(Duration_minss, RandomID, Progress)
View(qualtrics_payment)
qualtrics_randomdraw <- qualtrics %>% dplyr::select(., contains("_select")) %>% select(!contains("Click")) %>% select(!contains("submit"))
View(qualtrics_randomdraw)
qualtrics_payment <- qualtrics %>% arrange(qualtrics,Duration_mins) %>% select(Duration_mins, RandomID, Progress)
View(qualtrics_payment)
qualtrics_randomdraw <- qualtrics %>% dplyr::select(., contains("_select")) %>% select(!contains("Click")) %>% select(!contains("submit"))
View(qualtrics_randomdraw)
qualtrics_randomdraw <- qualtrics %>% dplyr::select(., contains("_select")) %>% select(!contains("Click")) %>% select(!contains("submit"))
View(qualtrics_randomdraw)
for(i in 1:nrow(qualtrics)){
coln<- floor(runif(1, min=2, max=60))
element <- i
qualtrics$payout_colnum[i] <- coln
qualtrics$payout_colname[i] <- colnames(qualtrics_randomdraw[coln])
}
qualtrics$payout_resp <- unlist(qualtrics_randomdraw[i, qualtrics$payout_col])
for_payment <- qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp, Duration_minss)
qualtrics$payout_colnum <- NA
qualtrics$payout_colname <- NA
qualtrics$payout_resp <- NA
for(i in 1:nrow(qualtrics)){
coln<- floor(runif(1, min=2, max=60))
element <- i
qualtrics$payout_colnum[i] <- coln
qualtrics$payout_colname[i] <- colnames(qualtrics_randomdraw[coln])
}
qualtrics$payout_resp <- unlist(qualtrics_randomdraw[i, qualtrics$payout_col])
for_payment <- qualtrics %>% select(RandomID, payout_colnum,payout_colname, payout_resp, Duration_minss)
qualtrics$payout_resp <- NA
qualtrics$payout_resp <- unlist(qualtrics_randomdraw[i, qualtrics$payout_col])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
##setwd("~/github_repos/PUBS_Data_Verification/") ##Set this to be whereever you're storing the data
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI")
measures_list$PSWQ
View(qualtrics)
qualtrics <- qualtrics %>% select(c(1:231))
View(qualtrics)
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
qualtrics <- qualtrics %>% select(c(1:231)) #rough way of doing this but it works
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
ress == "100")
#qualtrics <- qualtrics %>% select(c(1:231)) #rough way of doing this but it works
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
##setwd("~/github_repos/PUBS_Data_Verification/") ##Set this to be whereever you're storing the data
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
View(qualtrics)
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics <- qualtrics %>% select(c(1:231)) #rough way of doing this but it works
global_vars <- ("RandomID")
global_variables <- qualtrics %>% dplyr::select(colnames %in% global)
global_variables <- qualtrics %>% dplyr::select(colnames %in% global_vars)
global_variables <- qualtrics %>% dplyr::select(which(names(qualtrics), %in% global_vars)
global_variables <- qualtrics %>% dplyr::select(which(names(qualtrics) %in% global_vars)
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI")
global_variables <- qualtrics %>% dplyr::select(which(names(qualtrics)) %in% global_vars)
global_variables <- qualtrics[, which(names(qualtrics)), %in% global_vars)]
global_variables <- qualtrics[,which(names(qualtrics)), %in% global_vars)]
global_variables <- qualtrics[, which(names(qualtrics)) %in% global_vars)]
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]]
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
View(global_variables)
global_vars <- ("RandomID")
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
qualtrics <- qualtrics %>% select(c(1:231, 799)) #rough way of doing this but it works
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
##setwd("~/github_repos/PUBS_Data_Verification/") ##Set this to be whereever you're storing the data
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics <- qualtrics %>% select(c(1:231, 799)) #rough way of doing this but it works
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics <- qualtrics %>% select(c(1:231, 779)) #rough way of doing this but it works
View(qualtrics)
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics <- qualtrics %>% select(c(1:231, 779)) #rough way of doing this but it works
colnames(qualtrics)
global_vars <- ("Q500")
colnames(qualtrics)
global_vars <- ("RandomID")
if (options == "by_questionnaire"){
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI")
measures_list$PSWQ
}
options <- "by_questionnaire"
if (options == "by_questionnaire"){
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI)
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI")
measures_list$PSWQ
}
# Finding out if measures match Screening Methods Doc expectations
count(qualtrics_data, "PID")
# Finding out if measures match Screening Methods Doc expectations
count(measures_list("PID"))
# Finding out if measures match Screening Methods Doc expectations
count(measures_list[[PID]])
# Finding out if measures match Screening Methods Doc expectations
count(measures_list[PID])
# Finding out if measures match Screening Methods Doc expectations
count(measures_list["PID"])
measures_list
# Finding out if measures match Screening Methods Doc expectations
length(measures_list["PID"])
# Finding out if measures match Screening Methods Doc expectations
nrow(measures_list["PID"])
# Finding out if measures match Screening Methods Doc expectations
ncol(measures_list["PID"])
summarize.list(measures_list)
summary.list(measures_list)
summary(measures_list)
summary <- summary(measures_list)
summary
summary <- as.table(summary(measures_list))
summary
if (options == "by_questionnaire"){
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI, global_variables)
expected_vals <- c("109", "16", "24", "20", "40", "10")
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI", "GLOBAL")
measures_list$PSWQ
summary <- as.table(summary(measures_list))
summary[3 <- expected_vals]
}
if (options == "by_questionnaire"){
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI, global_variables)
expected_vals <- c(109, 16, 24, 20, 40, 10)
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI", "GLOBAL")
measures_list$PSWQ
summary <- as.table(summary(measures_list))
summary[3 <- expected_vals]
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
options(knitr.duplicate.label = "allow")
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly)
##setwd("~/github_repos/PUBS_Data_Verification/") ##Set this to be whereever you're storing the data
qualtrics <- read_csv("Qualtrics_Data_augpilot.csv")
qualtrics <- qualtrics %>% dplyr::filter(!StartDate < "2021-08-30") %>% dplyr::filter(Progress == "100")
qualtrics <- qualtrics %>% select(c(1:230, 779)) #rough way of doing this but it works
colnames(qualtrics)
global_vars <- ("RandomID")
if (options == "by_questionnaire"){
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI, global_variables)
expected_vals <- c(109, 16, 24, 20, 40, 1) #PLEASE UPDATE THIS VECTOR WITH YOUR EXPECTED COUNT
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI", "GLOBAL")
measures_list$PSWQ
summary <- as.table(summary(measures_list))
summary[3 <- expected_vals]
}
}
summary[3] <- expected_vals
if (options == "by_questionnaire"){
PID <- qualtrics %>% dplyr::select(contains("PID"))
PSWQ <- qualtrics %>% dplyr::select(contains("PSWQ"))
PAI <- qualtrics %>% dplyr::select(contains("PAI"))
BFAS <- qualtrics %>% dplyr::select(contains("BFAS"))
STAI <- qualtrics %>% dplyr::select(contains("STAI"))
global_variables <- qualtrics[,(names(qualtrics) %in% global_vars)]
measures_list <- list(PID, PSWQ, PAI, BFAS, STAI, global_variables)
expected_vals <- c(109, 16, 24, 20, 40, 1) #PLEASE UPDATE THIS VECTOR WITH YOUR EXPECTED COUNT
names(measures_list) <- c("PID", "PSWQ", "PAI", "BFAS", "STAI", "GLOBAL")
measures_list$PSWQ
summary <- as.table(summary(measures_list))
summary[3] <- expected_vals
}
summary
summary <- as.data.table(summary(measures_list))
summary <- as.tibble(summary(measures_list))
summary <- as.table(summary(measures_list))
summary <- as.table(summary(measures_list))
summary
measures_list
summary <- as.data.frame(summary(measures_list))
View(summary)
summary[3] <- expected_vals
summary <- summary(1:6)
summary_df <- as.data.frame(summary(measures_list))
summary_df <- summary_df(1:6)
summary_df <- summary_df(1:6)
summary_df <- summary_df[1:6]
summary_df <- summary_df[1:6 ,]
summary[Expected_vals] <- expected_vals
summary[4] <- expected_vals
summary$Expected_vals <- expected_vals
summary_df$Expected_vals <- expected_vals
View(summary_df)
summary_df <- summary_df[1:6, c(1,3)]
View(summary_df)
