mutate(C1 = case_when(Job == 5 ~ 1,
Job == 6 ~ 0,
Job == 7 ~ -1,
TRUE ~0))
data$SexDummyM <- factor(data$C1, labels = c("Private", "Government", "Self-Employed"), levels = c(1,0,-1))
data$C1 <- factor(data$C1, labels = c("Private", "Government", "Self-Employed"), levels = c(1,0,-1))
summary(lm(runtime ~ C1 data = data))
summary(lm(IncomeK ~ C1 data = data))
summary(lm(IncomeK ~ C1, data = data))
data <- data %>%
mutate(C1 = case_when(Job == 5 ~ 1,
Job == 6 ~ 0,
Job == 7 ~ -1,
TRUE ~0)) %>%
mutate(C2 = case_when(Job == 5 ~ 0,
Job == 6 ~ 1,
Job == 7 ~ -1,
TRUE ~0))
data$C1 <- factor(data$C1, labels = c("Private", "Government", "Self-Employed"), levels = c(1,0,-1))
data$C2 <- factor(data$C2, labels = c("Private", "Government", "Self-Employed"), levels = c(0,1,-1))
summary(lm(IncomeK ~ C1 + C2, data = data))
Income.aov = aov(IncomeK ~ C1, data = data)
summary(Income.aov)
summary(lm(IncomeK ~ C1 + C2, data = data))
Income.aov = aov(IncomeK ~ C1, data = data)
summary(Income.aov)
summary(lm(IncomeK ~ C1, data = data))
Income.aov = aov(IncomeK ~ C1, data = data)
summary(Income.aov)
results(Income.aov)
report(Income.aov)
summary(lm(IncomeK ~ C1, data = data))
summary(Income.aov)
summary(lm(IncomeK ~ C1, data = data))
table(data$Job) #As a factor with labels
table(data$Job) #As a factor with labels
table(data$Job) #As an integer
table(mean(data$Job)) #As a factor with labels
table(data$Job) #As a factor with labels
print(model.tables(Income.aov,"means"))
print(model.tables(Income.aov,"means"))
summary(lm(IncomeK ~ C1 + C2, data = data))
Income.aov = aov(IncomeK ~ C1 +C2, data = data)
summary(Income.aov)
summary(lm(IncomeK ~ C1 +C2, data = data))
print(model.tables(Income.aov,"means"))
data <- data %>%
mutate(C1 = case_when(Job == 5 ~ 1,
Job == 6 ~ 0,
Job == 7 ~ -1,
TRUE ~0)) %>%
mutate(C2 = case_when(Job == 5 ~ 1,
Job == 6 ~ -1,
Job == 7 ~ 0,
TRUE ~0))
data$C1 <- factor(data$C1, labels = c("Private", "Government", "Self-Employed"), levels = c(1,0,-1))
summary(lm(IncomeK ~ C1 + C2, data = data))
Income.aov = aov(IncomeK ~ C1 +C2, data = data)
data <- data %>%
mutate(C1 = case_when(Job == 5 ~ 1,
Job == 6 ~ 0,
Job == 7 ~ -1,
TRUE ~0)) %>%
mutate(C2 = case_when(Job == 5 ~ 1,
Job == 6 ~ -1,
Job == 7 ~ 0,
TRUE ~0))
data$C1 <- factor(data$C1, labels = c("Private", "Government", "Self-Employed"), levels = c(1,0,-1))
data$C2 <- factor(data$C1, labels = c("Private", "Government", "Self-Employed"), levels = c(0,1,-1))
data <- data %>%
mutate(C1 = case_when(Job == 5 ~ 1,
Job == 6 ~ 0,
Job == 7 ~ -1,
TRUE ~0)) %>%
mutate(C2 = case_when(Job == 5 ~ 1,
Job == 6 ~ -1,
Job == 7 ~ 0,
TRUE ~0))
data <- data %>%
mutate(c1 = case_when(Education == 1 ~ -1/2,
Education == 2 ~ -1/2,
Education == 3 ~ 1,
Education == 4 ~ 0,
Education == 5 ~ 0,
Education == 6 ~ 0,
TRUE ~0),
c2 = case_when(Education == 1 ~ -1/4,
Education == 2 ~ -1/4,
Education == 3 ~ -1/4,
Education == 4 ~ -1/4,
Education == 5 ~ 1/2,
Education == 6 ~ 1/2,
TRUE ~0),
c3 = case_when(Education == 1 ~ -1/5,
Education == 2 ~ -1/5,
Education == 3 ~ -1/5,
Education == 4 ~ -1/5,
Education == 5 ~ -1/5,
Education == 6 ~ 1,
TRUE ~0)),
data <- data %>%
mutate(c1 = case_when(Education == 1 ~ -1/2,
Education == 2 ~ -1/2,
Education == 3 ~ 1,
Education == 4 ~ 0,
Education == 5 ~ 0,
Education == 6 ~ 0,
TRUE ~0),
c2 = case_when(Education == 1 ~ -1/4,
Education == 2 ~ -1/4,
Education == 3 ~ -1/4,
Education == 4 ~ -1/4,
Education == 5 ~ 1/2,
Education == 6 ~ 1/2,
TRUE ~0),
c3 = case_when(Education == 1 ~ -1/5,
Education == 2 ~ -1/5,
Education == 3 ~ -1/5,
Education == 4 ~ -1/5,
Education == 5 ~ -1/5,
Education == 6 ~ 1,
TRUE ~0))
data <- data %>%
mutate(c1 = case_when(Education == 1 ~ -1/2,
Education == 2 ~ -1/2,
Education == 3 ~ 1,
Education == 4 ~ 0,
Education == 5 ~ 0,
Education == 6 ~ 0,
TRUE ~0),
c2 = case_when(Education == 1 ~ -1/4,
Education == 2 ~ -1/4,
Education == 3 ~ -1/4,
Education == 4 ~ -1/4,
Education == 5 ~ 1/2,
Education == 6 ~ 1/2,
TRUE ~0),
c3 = case_when(Education == 1 ~ -1/5,
Education == 2 ~ -1/5,
Education == 3 ~ -1/5,
Education == 4 ~ -1/5,
Education == 5 ~ -1/5,
Education == 6 ~ 1,
TRUE ~0))
summary(lm(IncomeK ~ c1 + c2 + c3, data = data))
summary(lm(IncomeK ~ c1 + c2 + c3, data = data))
lm <- summary(lm(IncomeK ~ c1 + c2 + c3, data = data))
report(lm)
lm <- lm(IncomeK ~ c1 + c2 + c3, data = data)
report(lm)
data <- data %>%
mutate(c1 = case_when(Education == 1 ~ -1/2,
Education == 2 ~ 1/2,
Education == 3 ~ 1,
Education == 4 ~ 0,
Education == 5 ~ 0,
Education == 6 ~ 0,
TRUE ~0),
c2 = case_when(Education == 1 ~ -1/4,
Education == 2 ~ -1/4,
Education == 3 ~ -1/4,
Education == 4 ~ -1/4,
Education == 5 ~ 1/2,
Education == 6 ~ 1/2,
TRUE ~0),
c3 = case_when(Education == 1 ~ -1/5,
Education == 2 ~ -1/5,
Education == 3 ~ -1/5,
Education == 4 ~ -1/5,
Education == 5 ~ -1/5,
Education == 6 ~ 1,
TRUE ~0))
lm <- lm(IncomeK ~ c1 + c2 + c3, data = data)
report(lm)
lm <- lm(IncomeK ~ c1 + c2 + c3, data = data)
report(lm)
lm <- lm(IncomeK ~ c1 + c2 + c3, data = data)
summary(lm)
report(lm)
summary(Income.aov)
summary(lm(IncomeK ~ C1, data = data))
print(model.tables(Income.aov,"means"))
bpd <- c(rnorm(100, mean = 30, sd = 15))
simulate_anxiety <- c(rnorm(100, mean = 28, sd = 20))
data_frame <- cbind(bpd, simulate_anxiety)
plot(data_frame)
bpd <- c(rnorm(100, mean = 15, sd = 15))
simulate_anxiety <- c(rnorm(100, mean = 28, sd = 20))
bpd <- c(rnorm(100, mean = 15, sd = 15))
simulate_anxiety <- c(rnorm(100, mean = 28, sd = 20))
data_frame <- cbind(bpd, simulate_anxiety)
plot(data_frame)
bpd <- c(rnorm(100, mean = 15, sd = 15))
simulate_anxiety <- c(rnorm(100, mean = 28, sd = 10))
data_frame <- cbind(bpd, simulate_anxiety)
plot(data_frame)
bpd <- c(rnorm(100, mean = 40, sd = 15))
simulate_anxiety <- c(rnorm(100, mean = 28, sd = 10))
data_frame <- cbind(bpd, simulate_anxiety)
plot(data_frame)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, ggplot2, simr, lme4, pwr, powerMediation, effectsize, dependlab, wrapr, rprime)
setwd("~/github_repos/PUBS/Reversal_simulation/")
data_dir <- "~/github_repos/PUBS/Reversal_simulation/data_txt"
source("q_learning_functions.R")
source("helper_functions_MLMpower.R")
#load("outcomes_2.Rdata")
#outcomes_2 <- outcomes
#load("outcomes.Rdata")
effect_size <- convert_d_to_r(.28, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size)
effect_size_2 <- convert_d_to_r(.32, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size_2)
effect_size^2
effect_size_2^2
effect_size <- convert_d_to_r(.61, log = FALSE)
effect_size^2
library(easystats)
library("easystats")
library(effectsize)
t_to_d(3.42, 56, paired = TRUE, ci = 0.95, pooled, ...)
t_to_d(3.42, 56, paired = TRUE, ci = 0.95, pooled)
t_to_d(3.42, 56, paired = TRUE, ci = 0.95)
t_to_d(2.11, 56, paired = TRUE, ci = 0.95)
t_to_d(t=3.92, 56, paired = TRUE, ci = 0.95)
effect_size <- d_to_r(.46, log = FALSE)
pwr.r.test(power = .8, r = effect_size)
effect_size <- convert_d_to_r(.46, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size)
effect_size <- convert_d_to_r(.42, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size)
0.2055172^2
effect_size <- convert_d_to_r(.28, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size)
effect_size^2
effect_size_2^2
d_to_r(.42, log = FALSE)
effect_size_2 <- convert_d_to_r(.32, log = FALSE)
#
effect_size_2 <- convert_d_to_r(.32, log = FALSE)
effect_size_2
effect_size <- convert_d_to_r(.28, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size)
effect_size_2 <- convert_d_to_r(.32, log = FALSE)
#
pwr.r.test(power = .8, r = effect_size_2)
effect_size <- d_to_r(.42, log = FALSE)
pwr.r.test(power = .8, r = effect_size)
effect_size <- d_to_r(.42, log = FALSE)
pwr.r.test(power = .8, r = effect_size)
read_csv("Downloads/dtk_psu_msgs.csv")
read.csv("Downloads/dtk_psu_msgs.csv")
Dtk<- read.csv("Downloads/dtk_psu_msgs.csv")
colnames(DtK)
colnames(Dtk)
unique(DtK$text)
unique(Dtk$text)
View(Dtk)
View(Changepoint_worry)
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot)
##First things first: load data. Eventually ask nate for find.unproccessed code
setwd("~/github_repos/PUBS_Data_Verification/")
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
#drop rows that aren't currently useful
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName))
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot)
##First things first: load data. Eventually ask nate for find.unproccessed code
setwd("~/github_repos/PUBS_Data_Verification/")
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
#drop rows that aren't currently useful
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName))
##long pipe for tidying data
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
##dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
##create plot for responsexreversal?
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) + xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point()
subjects <- unique(distinct$subject)
##create plot for responsexreversal?
plot_list <- list()
for (i in subjects) {
j <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Correct", "Incorrect", "Reversal Point"), values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
plot_list[[i]] <- j
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_list
dev.off()
View(distinct)
View(distinct)
dstinct %>% group_by(subject, block_number_trial_number) %>% cummax(isResponsecorect)
distinct %>% group_by(subject, block_number_trial_number) %>% cummax(isResponsecorect)
distinct %>% group_by(subject, block_number, trial_number) %>% cummax(isResponsecorect)
View(reversal_data)
remove_noresponse <- distinct %>%
filter(!trial_response == "noresponse") %>% group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>% mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(as.numeric(numberoftimesleft)) + max(as.numeric(numberoftimesright))))
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE))
remove_noresponse <- distinct %>%
filter(!trial_response == "noresponse") %>% group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase., reversal_number) %>% mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(as.numeric(numberoftimesleft)) + max(as.numeric(numberoftimesright))))
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE))
remove_noresponse <- distinct %>%
filter(!trial_response == "noresponse") %>% group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase, reversal_number) %>% mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(as.numeric(numberoftimesleft)) + max(as.numeric(numberoftimesright))))
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE))
remove_noresponse <- distinct %>%
filter(!trial_response == "noresponse") %>% group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase, reversalnumber) %>%
mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(as.numeric(numberoftimesleft)) + max(as.numeric(numberoftimesright))))
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE))
obj <- remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE))
View(obj)
remove_noresponse <- distinct %>%
filter(!trial_response == "noresponse") %>% group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>%
mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(as.numeric(numberoftimesleft)) + max(as.numeric(numberoftimesright))))
obj <- remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE))
View(obj)
id <- which(abs(c(0, diff(sign(distinct$isResponseCorrect)))) == 1)
id <- which(abs(c(1, diff(sign(distinct$isResponseCorrect)))) == 1)
id <- which(abs(c(1, diff(sign(distinct$isResponseCorrect)))) == 2)
id <- which(abs(c(0, diff(sign(distinct$isResponseCorrect)))) == 2)
diff(sign(distinct$isResponseCorrect))
remove_noresponse <- remove_noresponse %>% mutate(reached_criterion = ifelse(as.numeric(numbercorrect) > 10, trial_number, NA))
remove_noresponse %>% dplyr::filter(!reached_criterion == 0) %>% summarise(reached_criterion = min(reached_criterion, na.rm=TRUE))
distinct %>%
group_by(subject, block_number) %>%
summarise(max = max(percent_correct_block, na.rm=TRUE))
remove_noresponse %>% dplyr::filter(!reached_criterion == 0) %>% summarise(reached_criterion = min(reached_criterion, na.rm=TRUE))
remove_noresponse <- remove_noresponse %>% mutate(reached_criterion = ifelse(as.numeric(numbercorrect) > 10, trial_number, NA)) %>%
mutate(reached_criterion = ifelse(task_phase == "Reversal", reached_criterion - reversalnumber,reached_criterion ))
remove_noresponse %>% dplyr::filter(!reached_criterion == 0) %>% summarise(reached_criterion = min(reached_criterion, na.rm=TRUE))
remove_noresponse <- distinct %>%
filter(!trial_response == "noresponse") %>% group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number )) %>%
mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(as.numeric(numberoftimesleft)) + max(as.numeric(numberoftimesright))))
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE), numberoftimesleft)
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE), trial_number = max(trial_number))
remove_noresponse %>% summarise(max = max(percent_correct_block, na.rm=TRUE), trial_number = max(phase_trialnum))
#drop rows that aren't currently useful
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
##long pipe for tidying data
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
##dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
reversal_data <- reversal_data %>% select(!c(blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
reversal_data %>% select(!c(
picture.Left.currentvalue, picture.Right.currentvalue)
)
reversal_data <- reversal_data %>% select(!c(
picture.Left.currentvalue, picture.Right.currentvalue))
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
##dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
example <- distinct %>% select(isResponseCorrect, trial_number, task_phase, subject, reversalnumber)
View(example)
example <- distinct %>% select(isResponseCorrect, phase_trial_number, task_phase, subject, reversalnumber)
example <- distinct %>% select(isResponseCorrect, phase_trialnum, task_phase, subject, reversalnumber)
View(remove_noresponse)
distinct <- distinct %>%
group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number )) %>%
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(phase_trialnum)))
distinct <- distinct %>%
group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number )) %>%
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(phase_trialnum)))
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
mutate(new_contingency = ifelse(trial_number == 0 || reversal_trial == trial_number, 1, NA)) %>%
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>%
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>%
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) %>%
##dplyr::mutate(isResponseCorrect = ifelse(isResponseCorrect == 1, 1, 0)) %>%
dplyr::filter(!trial_response == "noresponse")
distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
View(distinct)
View(distinct)
distinct <- distinct %>%
group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number )) %>%
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(percent_correct_block = max(as.numeric(numbercorrect))/(max(phase_trialnum)))
distinct <- distinct %>%
group_by(subject, block_number) %>%
group_by(subject, block_number, task_phase) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number )
)
distinct <- distinct %>%
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
mutate(phase_numbercorrect = ifelse(task_phase == "Reversal", numbercorrect, numbercorrect))
distinct %>% summarise(max = max(percent_correct_block, na.rm=TRUE), trial_number = max(phase_trialnum))
