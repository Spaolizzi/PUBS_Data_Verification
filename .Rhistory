car::vif(m22.p) # Doesn't seem much different in terms of collinearity - good news!
summary(m22.p) #
plot_model(m22.p, type = "pred", terms = c("Val_use_stimcent","Ar_use_stimcent", "stim_fac"))
m22.n <- lmer(rt_inv ~ rt_lag_z + trial_z + length + freq + animal_lat_z +
stim_fac*Ar_use_stimcent*Val_use_stimcent +
(1 + trial_z + rt_lag_z || subj_idx), neg, REML = FALSE)
car::vif(m22.n) # Also  no big VIF differences
summary(m22.n) # Effects look similar to our big model, a little stronger though
plot_model(m22.n, type = "pred", terms = c("Val_use_stimcent","Ar_use_stimcent", "stim_fac"))
pos %>%
mutate(stim_fac = factor(as.character(stim_fac), levels = c("neu", "pos")))  %>%
dplyr::select(stim, stim_fac)
neg %>%
mutate(stim_fac = factor(as.character(stim_fac), levels = c("neu", "neg")))  %>%
dplyr::select(stim, stim_fac)
summary(m22.p) #
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot)
##First things first: load data. Eventually ask nate for find.unproccessed code
setwd("~/github_repos/PUBS_Data_Verification/")
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
#drop rows that aren't useful - will delete from main script
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
##long pipe for tidying data, not by block
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>% filter(!trial_number == 0) %>% #removing things we don't need
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>% ##percentage correct across block
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) #note which block they're in
##doesn't really do what I hoped it would
##distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
##mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
subjects <- unique(distinct$subject)
distinct <- distinct %>% group_by(subject, block_number) %>%
mutate(numbercorrect = as.numeric(numbercorrect)) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number)) %>%
mutate(numbercorrect_acq = ifelse(as.numeric(trial_number) == as.numeric(reversalnumber), numbercorrect, 0)) %>%
mutate(numbercorrect_reversal = ifelse(task_phase == "Reversal", numbercorrect - max(numbercorrect_acq), 0)) %>%
mutate(numbercorrect_phase = ifelse(task_phase == "Reversal", numbercorrect_reversal, numbercorrect)) %>%
mutate(ResponseCorrect = as.numeric(isResponseCorrect)) %>%
select(!c(numbercorrect_acq, numbercorrect_reversal)) %>% #phase_numbercorrect
group_by(subject, block_number, task_phase) %>%
mutate(reached_criterion = ifelse(as.numeric(numbercorrect_phase) > 10, phase_trialnum, NA)) %>%
mutate(percent_correct_phase = as.numeric(numbercorrect_phase)/max(as.numeric(phase_trialnum)))  %>%
mutate(diff_numbercorrect_phase = numbercorrect_phase - lag(numbercorrect_phase)) %>%
test <- distinct %>% group_by(subject, block_number, ResponseCorrect) %>% arrange(subject, block_number, total_trialnum) %>% mutate(ConsecutiveCorrect = cumsum(ResponseCorrect))
example <- distinct %>% group_by(block_number) %>% select(subject, block_number, trial_number, ResponseCorrect) %>% slice(2:4)
obj <- distinct %>% summarise(reached_criterion = min(reached_criterion, na.rm=TRUE), percent_correct_phase = max(percent_correct_phase), trial_number = max(phase_trialnum)) %>% mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
plot_subjects <- list()
##create plot for responsexreversal? Overall look at the task
# Plot --------------------------------------------------------------------
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ggtitle(i) + ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_subjects
dev.off()
test <- distinct %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(ResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(ResponseCorrect == -1, 0, cumsum(ResponseCorrect))) %>%
ungroup() %>%
select(-grp)
test <- distinct %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(ResponseCorrect == -1, 0, cumsum(ResponseCorrect))) %>%
ungroup() %>%
select(-grp)
test <- distinct %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
ungroup() %>%
select(-grp)
View(test)
library(data.table)
setDT(df)[, ConsecutiveCorrect := rowid(rleid(isResponseCorrect)) *
(isResponseCorrect == 1), by = .(subject, task_phase, block_number)]
setDT(distinct)[, ConsecutiveCorrect := rowid(rleid(isResponseCorrect)) *
(isResponseCorrect == 1), by = .(subject, task_phase, block_number)]
class(distinct)
setDT(distinct)[, ConsecutiveCorrect := rowid(rleid(isResponseCorrect)) *
(isResponseCorrect == 1), by = .(subject, task_phase, block_number)]
View(distinct)
test <- distinct %>% ungroup() %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
ungroup() %>%
select(-grp)
obj <- distinct %>% summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = min(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
##long pipe for tidying data, not by block
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>% filter(!trial_number == 0) %>% #removing things we don't need
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>% ##percentage correct across block
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) #note which block they're in
##doesn't really do what I hoped it would
##distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
##mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
subjects <- unique(distinct$subject)
distinct <- distinct %>% group_by(subject, block_number) %>%
mutate(numbercorrect = as.numeric(numbercorrect)) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number)) %>%
mutate(numbercorrect_acq = ifelse(as.numeric(trial_number) == as.numeric(reversalnumber), numbercorrect, 0)) %>%
mutate(numbercorrect_reversal = ifelse(task_phase == "Reversal", numbercorrect - max(numbercorrect_acq), 0)) %>%
mutate(numbercorrect_phase = ifelse(task_phase == "Reversal", numbercorrect_reversal, numbercorrect)) %>%
mutate(ResponseCorrect = as.numeric(isResponseCorrect)) %>%
select(!c(numbercorrect_acq, numbercorrect_reversal)) %>% #phase_numbercorrect
group_by(subject, block_number, task_phase) %>%
mutate(reached_criterion = ifelse(as.numeric(numbercorrect_phase) > 10, phase_trialnum, NA)) %>%
mutate(percent_correct_phase = as.numeric(numbercorrect_phase)/max(as.numeric(phase_trialnum)))  %>%
mutate(diff_numbercorrect_phase = numbercorrect_phase - lag(numbercorrect_phase)) %>%
ungroup() %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
ungroup() %>%
select(-grp)
obj <- distinct %>% summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = min(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
View(obj)
obj <- distinct %>% group_by(subject, block_number, task_phase) %>%
summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = max(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
View(obj)
##long pipe for tidying data, not by block
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>% filter(!trial_number == 0) %>% #removing things we don't need
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>% ##percentage correct across block
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) #note which block they're in
##doesn't really do what I hoped it would
##distinct <- distinct %>% mutate(numberoftimesleft = ifelse(trial_response == "noresponse", 0, numberoftimesleft)) %>%
##mutate(numberoftimesright = ifelse(trial_response == "noresponse", 0, numberoftimesright))
subjects <- unique(distinct$subject)
distinct <- distinct %>% group_by(subject, block_number) %>%
mutate(numbercorrect = as.numeric(numbercorrect)) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number)) %>%
mutate(numbercorrect_acq = ifelse(as.numeric(trial_number) == as.numeric(reversalnumber), numbercorrect, 0)) %>%
mutate(numbercorrect_reversal = ifelse(task_phase == "Reversal", numbercorrect - max(numbercorrect_acq), 0)) %>%
mutate(numbercorrect_phase = ifelse(task_phase == "Reversal", numbercorrect_reversal, numbercorrect)) %>%
mutate(ResponseCorrect = as.numeric(isResponseCorrect)) %>%
select(!c(numbercorrect_acq, numbercorrect_reversal)) %>% #phase_numbercorrect
group_by(subject, block_number, task_phase) %>%
mutate(reached_criterion = ifelse(as.numeric(numbercorrect_phase) > 10, phase_trialnum, NA)) %>%
mutate(percent_correct_phase = as.numeric(numbercorrect_phase)/max(as.numeric(phase_trialnum)))  %>%
mutate(diff_numbercorrect_phase = numbercorrect_phase - lag(numbercorrect_phase)) %>%
ungroup() %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == 0, NA, ConsecutiveCorrect))
ungroup() %>%
select(-grp)
obj <- distinct %>% group_by(subject, block_number, task_phase) %>%
summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = max(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
distinct <- distinct %>% group_by(subject, block_number) %>%
mutate(numbercorrect = as.numeric(numbercorrect)) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number)) %>%
mutate(numbercorrect_acq = ifelse(as.numeric(trial_number) == as.numeric(reversalnumber), numbercorrect, 0)) %>%
mutate(numbercorrect_reversal = ifelse(task_phase == "Reversal", numbercorrect - max(numbercorrect_acq), 0)) %>%
mutate(numbercorrect_phase = ifelse(task_phase == "Reversal", numbercorrect_reversal, numbercorrect)) %>%
mutate(ResponseCorrect = as.numeric(isResponseCorrect)) %>%
select(!c(numbercorrect_acq, numbercorrect_reversal)) %>% #phase_numbercorrect
group_by(subject, block_number, task_phase) %>%
mutate(reached_criterion = ifelse(as.numeric(numbercorrect_phase) > 10, phase_trialnum, NA)) %>%
mutate(percent_correct_phase = as.numeric(numbercorrect_phase)/max(as.numeric(phase_trialnum)))  %>%
mutate(diff_numbercorrect_phase = numbercorrect_phase - lag(numbercorrect_phase)) %>%
ungroup() %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == 0, NA, ConsecutiveCorrect)) %>%
ungroup() %>%
select(-grp)
obj <- distinct %>% group_by(subject, block_number, task_phase) %>%
summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = max(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
View(obj)
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ggtitle(i) + ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_subjects
obj
dev.off()
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, gridExtra)
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot_histograms.pdf", width = 12, height = 5)
plot_list_hist
grid.table(distinct)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_subjects
grid.table(distinct)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_subjects
grid.table(distinct)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 5)
plot_subjects
grid.table(obj)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot_histograms.pdf", width = 8, height = 12)
plot_list_
grid.table(distinct)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 8, height = 12)
plot_subjects
grid.table(obj)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 8, height = 12)
plot_subjects
grid.table(obj)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
plot_subjects
grid.table(obj)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
plot_subjects
grid.newpage()
grid.table(obj)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
plot_subjects
grid.newpage()
grid.table(obj)
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj)
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj)
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj[1:15, ], show.rownames = FALSE)
grid.newpage()
grid.table(sga_hits[16:30, ], show.rownames = FALSE)
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj[1:15, ])
grid.newpage()
grid.table(sga_hits[16:30, ])
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj[1:15, ])
grid.newpage()
grid.table(obj[16:30, ])
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj[1:15, ])
grid.newpage()
grid.table(obj[16:30, ])
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
plot_subjects
dev.off()
View(obj)
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
plot_subjects
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:30,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,],  show.rownames = FALSE)
grid.newpage()
grid.table(obj[16:30,],  show.rownames = FALSE)
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
plot_subjects
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
plot_subjects
grid.newpage()
grid.table(obj[16:30,])
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
plot_subjects
grid.newpage()
grid.table(obj[16:30,])
grid.newpage()
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
plot_subjects
grid.newpage()
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 6)
grid.newpage()
grid.table(obj[1:15,])
grid.newpage()
grid.table(obj[16:30,])
plot_subjects
grid.newpage()
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
grid.table(obj[1:30,])
grid.newpage()
plot_subjects
grid.newpage()
dev.off()
cowplot <- cowplot(scatter, hist, ncol = 2)
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, gridExtra)
cowplot <- cowplot(scatter, hist, ncol = 2)
cowplot <- cowplot::plot_grid(scatter, hist, ncol = 2)
View(cowplot)
cowplot::plot_grid(scatter, hist, ncol = 2)
cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list <- list()
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
grid.table(obj[1:30,])
grid.newpage()
cowplot_list
grid.newpage()
dev.off()
obj %>% dplyr::filter(above_threshold == "Below")
tg <- tableGrob(obj)
for (i in c(10, 18, 20, 21)) tg$grobs[[i]] <- editGrob(tg$grobs[[i]], gp=gpar(col="red"))
tg <- tableGrob(obj[1:30, 1:8])
for (i in c(10, 18, 20, 21)) tg$grobs[[i]] <- editGrob(tg$grobs[[i]], gp=gpar(col="red"))
