>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, gridExtra)
##First things first: load data. Eventually ask nate for find.unproccessed code
setwd("~/github_repos/PUBS_Data_Verification/")
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
#drop rows that aren't useful - will delete from main script
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
##long pipe for tidying data, not by block
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>% filter(!trial_number == 0) %>% #removing things we don't need
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>% ##percentage correct across block
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) #note which block they're in
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
subjects <- unique(distinct$subject)
distinct <- distinct %>% group_by(subject, block_number) %>%
mutate(numbercorrect = as.numeric(numbercorrect)) %>%
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number)) %>%
mutate(numbercorrect_acq = ifelse(as.numeric(trial_number) == as.numeric(reversalnumber), numbercorrect, 0)) %>%
mutate(numbercorrect_reversal = ifelse(task_phase == "Reversal", numbercorrect - max(numbercorrect_acq), 0)) %>%
mutate(numbercorrect_phase = ifelse(task_phase == "Reversal", numbercorrect_reversal, numbercorrect)) %>%
mutate(ResponseCorrect = as.numeric(isResponseCorrect)) %>%
select(!c(numbercorrect_acq, numbercorrect_reversal)) %>% #phase_numbercorrect
group_by(subject, block_number, task_phase) %>%
mutate(reached_criterion = ifelse(as.numeric(numbercorrect_phase) > 10, phase_trialnum, NA)) %>%
mutate(percent_correct_phase = as.numeric(numbercorrect_phase)/max(as.numeric(phase_trialnum)))  %>%
mutate(diff_numbercorrect_phase = numbercorrect_phase - lag(numbercorrect_phase)) %>%
ungroup() %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == 0, NA, ConsecutiveCorrect)) %>%
ungroup() %>%
select(-grp)
obj <- distinct %>% group_by(subject, block_number, task_phase) %>%
summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = max(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
tg <- tableGrob(obj[1:30, 1:8])
for (i in c(10, 18, 20, 21)) tg$grobs[[i]] <- editGrob(tg$grobs[[i]], gp=gpar(col="red"))
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, gridExtra, grid)
for (i in c(10, 18, 20, 21)) tg$grobs[[i]] <- grid::editGrob(tg$grobs[[i]], gp=gpar(col="red"))
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
grid.newpage()
cowplot_list
grid.newpage()
dev.off()
tg
obj %>% dplyr::filter(above_threshold == "Below")
cowplot_list <- list()
##create plot for responsexreversal? Overall look at the task
# Plot --------------------------------------------------------------------
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
cowplot_list <- list()
plot_subject <- list()
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
##create plot for responsexreversal? Overall look at the task
# Plot --------------------------------------------------------------------
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
cowplot_list <- list()
plot_subjects <- list()
##create plot for responsexreversal? Overall look at the task
# Plot --------------------------------------------------------------------
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
tg <- tableGrob(obj[1:30, 1:8])
for (i in c(10, 18, 20, 21)) tg$grobs[[i]] <- grid::editGrob(tg$grobs[[i]], gp=gpar(col="red"))
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
tg
grid.newpage()
cowplot_list
grid.newpage()
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
grid.draw(tg)
grid.newpage()
cowplot_list
grid.newpage()
dev.off()
tg <- tableGrob(obj[1:30, 1:8])
for (i in c(11, 19, 21, 22)) tg$grobs[[i]] <- grid::editGrob(tg$grobs[[i]], gp=gpar(col="white", fill = "red"))
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
grid.draw(tg)
grid.newpage()
cowplot_list
grid.newpage()
dev.off()
tg <- tableGrob(obj[1:30, 1:8])
for (i in c(11, 19, 21, 22)) tg$grobs[[i]] <- grid::editGrob(tg$grobs[[i]], gp=gpar(fill = "red"))
tg
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
grid.newpage()
grid.draw(tg)
grid.newpage()
cowplot_list
grid.newpage()
dev.off()
v <- which(obj$above_threshold == "Below")
flextable(obj)
##Load Packages
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable)
flextable(obj)
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
tab
cowplot_list
dev.off()
tab <- flextable(obj)
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
tab
cowplot_list
dev.off()
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
tab
cowplot_list
dev.off()
colnames(distinct)
colnames(distinct)
knitr::opts_chunk$set(echo = TRUE)
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable)
setwd("~/github_repos/PUBS_Data_Verification/")
source("Tidy_reversal_function.R")
knitr::opts_chunk$set(echo = TRUE)
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable)
setwd("~/github_repos/PUBS_Data_Verification/")
#source("Tidy_reversal_function.R")
#load data
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
colormatrix <- ifelse(obj$above_threshold[, "Below"] > 50, "red", "white")
colormatrix <- ifelse(obj$above_threshold == "Below", "red", "white")
obj %>% flextable() %>% bg(j = 2:3, bg=colormatrix)
colormatrix <- ifelse(obj$above_threshold == "Below", "red", "white")
obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(3)]), "white")
wes_palette("Cavalcanti1")[c(3)])
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(3)], "white")
tab <- obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
View(tab)
obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(1)], "white")
tab <- obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(4)], "white")
tab <- obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
pdf("~/github_repos/PUBS_Data_Verification/Reversal_Pilot.pdf", width = 12, height = 12)
tab
cowplot_list
dev.off()
knitr::opts_chunk$set(echo = TRUE)
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable)
setwd("~/github_repos/PUBS_Data_Verification/")
#source("Tidy_reversal_function.R")
#load data
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
#drop rows that aren't useful - will delete from main script
reversal_data <- reversal_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
##long pipe for tidying data, not by block
distinct <- reversal_data %>%
group_by(subject, block_number, trial_number) %>% ##group by subject and block to prevent weirdness
mutate(trial_number = as.numeric(trial_number)) %>%  mutate(block_number = as.numeric(block_number)) %>% mutate(reversalnumber = as.numeric(reversalnumber)) %>% ##change needed things to numeric
arrange(subject, block_number, trial_number) %>% slice(which.max(centsearned)) %>% ## arrange in order based on grouping
mutate(trial_latency = ifelse(rightleft == "left", trial.presentation_left.latency, trial.presentation_right.latency)) %>% ## combine latencies to create overall trial latency
mutate(trial_response = ifelse(rightleft == "left", trial.presentation_left.response, trial.presentation_right.response)) %>% ## combine responses to create overall trial response
mutate(trial_response = ifelse(trial_response == 45, "left", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 50, "right", trial_response)) %>% #change name of response variable
mutate(trial_response = ifelse(trial_response == 0, "noresponse", trial_response)) %>% #change name of response variable
mutate(total_trialnum = ifelse(block_number > 1, trial_number + (80*(block_number-1)), trial_number)) %>% #add running counter for total trials
mutate(reversal_trial = ifelse(trial_number == reversalnumber , trial_number, NA)) %>% #change name of response variable
select(!c(trial.presentation_left.latency, trial.presentation_right.latency, trial.presentation_left.response, trial.presentation_right.response)) %>% # delete extra columns for conciseness
filter(!total_trialnum > 240 && !block_number > 3) %>% filter(!trial_number == 0) %>% #removing things we don't need
group_by(subject, block_number) %>% mutate(percent_correct_block = as.numeric(numbercorrect)/80) %>% ##percentage correct across block
mutate(task_phase = ifelse(trial_number <= reversalnumber, "Acquisition", "Reversal")) #note which block they're in
### This pipe readies the data for the first scatterplot, giving a first look at of performance
distinct <- distinct %>% group_by(subject, block_number) %>% #grouping again
mutate(numbercorrect = as.numeric(numbercorrect)) %>% # get things as.numeric
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
mutate(phase_trialnum = ifelse(task_phase == "Reversal", trial_number - reversalnumber, trial_number)) %>%
mutate(numbercorrect_acq = ifelse(as.numeric(trial_number) == as.numeric(reversalnumber), numbercorrect, 0)) %>%
mutate(numbercorrect_reversal = ifelse(task_phase == "Reversal", numbercorrect - max(numbercorrect_acq), 0)) %>%
mutate(numbercorrect_phase = ifelse(task_phase == "Reversal", numbercorrect_reversal, numbercorrect)) %>%
mutate(ResponseCorrect = as.numeric(isResponseCorrect)) %>%
select(!c(numbercorrect_acq, numbercorrect_reversal)) %>% #phase_numbercorrect
group_by(subject, block_number, task_phase) %>%
mutate(reached_criterion = ifelse(as.numeric(numbercorrect_phase) > 10, phase_trialnum, NA)) %>%
mutate(percent_correct_phase = as.numeric(numbercorrect_phase)/max(as.numeric(phase_trialnum)))  %>%
mutate(diff_numbercorrect_phase = numbercorrect_phase - lag(numbercorrect_phase)) %>%
ungroup() %>%
group_by(
subject,
task_phase,
block_number,
grp = lag(cumsum(isResponseCorrect == -1), default = 0)
) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == -1, 0, cumsum(isResponseCorrect))) %>%
mutate(ConsecutiveCorrect = ifelse(isResponseCorrect == 0, NA, ConsecutiveCorrect)) %>%
ungroup() %>%
select(-grp)
subjects <- unique(distinct$subject)
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
obj <- distinct %>% group_by(subject, block_number, task_phase) %>%
summarise(reached_criterion = min(reached_criterion, na.rm=TRUE),
percent_correct_phase = max(percent_correct_phase),
ConsecutiveCorrect = max(ConsecutiveCorrect),
trial_number = max(phase_trialnum)) %>%
mutate(above_threshold = ifelse(percent_correct_phase >= .50, "Above", "Below"))
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
subjects <- unique(distinct$subject); cowplot_list <- list(); plot_subjects <- list()
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
for (i in subjects) {
scatter <- ggplot(distinct %>% dplyr::filter(subject == i), aes(x=trial_number, y=trial_response, colour = isResponseCorrect)) +
geom_point() +
geom_vline(aes(xintercept = reversal_trial, color = "Reversal Point")) +
scale_color_manual(labels = c("Incorrect", "Correct", "Reversal Point"),values = (wes_palette("Cavalcanti1")[c(5,4,2)])) +
xlab("Trial Number") + ylab("Response Type") + ggtitle(i) +
facet_wrap(~block_number)
scatter[[i]] <- scatter
hist <- obj %>% filter(subject == i) %>% group_by(block_number) %>% ggplot(aes(y=percent_correct_phase, x = task_phase, fill = above_threshold)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = (wes_palette("Cavalcanti1")[c(4,5)])) +
ylab("Percentage Correct") + xlab("") +  facet_grid(~ block_number)
hist[[i]] <- hist
plot_subjects[[i]] <- list(scatter, hist)
cowplot <- cowplot::plot_grid(scatter, hist, nrow = 2)
cowplot_list[[i]] <- cowplot
}
colormatrix <- ifelse(obj$above_threshold == "Below", wes_palette("Cavalcanti1")[c(4)], "white")
tab <- obj %>% flextable() %>% bg(j = 1:8, bg=colormatrix)
tab
cowplot_list
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable)
setwd("~/github_repos/PUBS_Data_Verification/")
#source("Tidy_reversal_function.R")
#load data
reversal_data <- data.table::fread("pubs_pilot_reversal_task_forpilot_7.4.21_raw_21_07_29.csv", fill = TRUE)
reversal_data <- reversal_data %>% row_to_names(4) %>% group_by(subject) %>% filter(n() >= 200)
knitr::opts_chunk$set(message = FALSE)
##Load Packages and source scripts
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable)
setwd("~/github_repos/PUBS_Data_Verification/")
#source("Tidy_functions_PUBS.R")
#load data
cannon_data <- data.table::fread("pubs_pilot_cannon_task_forpilot_6.30.21_raw_21_07_29-31.csv", fill = TRUE)
View(cannon_data)
#drop rows that aren't useful - will delete from main script
cannon_data <- cannon_data %>% select(!c(practiceInstructionIndex,blockName,
ITI, numTrialEachBlock, instructionIndex,
isThisTrialPractice, trialCounter, blockNumber, build, experimentName,
picture.Left.currentvalue, picture.Right.currentvalue))
colnames(cannon_data)
#drop rows that aren't useful - will delete from main script
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time))
cannon_data %>% which (angrand ==angsurprise)
cannon_data %>% which(angrand == angsurprise)
names(cannon_data)[18] <- "trial_earnings"
cannon_data <- data.table::fread("pubs_pilot_cannon_task_forpilot_6.30.21_raw_21_07_29-31.csv", fill = TRUE)
names(cannon_data)[22] <- "trial_earnings"
names(cannon_data)[17] <- "surprise_dup"
View(cannon_data)
#drop rows that aren't useful - will delete from main script
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time))
subjects <- unqiue(cannon_data$subjects)
subjects <- unique(cannon_data$subjects)
subjects <- unique(cannon_data$subject)
table(cannon_data$subject)
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time)) %>% group_by(subject) %>% mutate(ncol = max(count(1:nrow))
)
cannon_data <- cannon_data %>%
roup_by(subject) %>% mutate(ncol = max(count(1:nrow))
)
cannon_data <- cannon_data %>% group_by(subject) %>% mutate(ncol = max(count(1:nrow))
)
cannon_data <- cannon_data %>%
filter(subject == c(134345921, 208802030, 308519144))
#load data
cannon_data <- data.table::fread("pubs_pilot_cannon_task_forpilot_6.30.21_raw_21_07_29-31.csv", fill = TRUE)
names(cannon_data)[22] <- "trial_earnings"
names(cannon_data)[17] <- "surprise_dup"
subjects <- unique(cannon_data$subject)
#drop rows that aren't useful - will delete from main script
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time)) %>% group_by(subject)  %>% filter(!subject == c(134345921, 208802030, 308519144))
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time)) %>% group_by(subject)  %>% filter(!subject = c(134345921, 208802030, 308519144))
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time)) %>% group_by(subject)  %>% %>% group_by(subject) %>% filter(n() >= 3)
cannon_data <- cannon_data %>% select(!c(build, experimentName, date, time)) %>% group_by(subject)  %>% group_by(subject) %>% filter(n() >= 3)
subjects <- unique(cannon_data$subject)
cannon_data <- cannon_data %>%
filter(n() > 3)
View(cannon_data)
distinct <- cannon_data %>%
group_by(subject, block) %>% ##group by subject and block to prevent weirdness
mutate_aal(as.numeric(as_character()))
distinct <- cannon_data %>%
group_by(subject, block) %>% ##group by subject and block to prevent weirdness
mutate_all(as.numeric(as_character()))
distinct <- cannon_data %>%
group_by(subject, block) %>% ##group by subject and block to prevent weirdness
mutate_all(as.numeric(as.character()))
distinct <- cannon_data %>%
group_by(subject, block) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))))
distinct <- cannon_data %>%
group_by(subject, block) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x)))
View(distinct)
distinct <- cannon_data %>%
group_by(subject, block, trialnum) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))) %>% ##change needed things to numeric
mutate(cannonballs_tot = cannonballs_caught + cannonballs_missed) %>%
arrange(subject, block_number, trial_number) %>% slice(which.max(cannonballs_tot))
distinct <- cannon_data %>%
group_by(subject, block, trialnum) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))) %>% ##change needed things to numeric
mutate(cannonballs_tot = cannonballs_caught + cannonballs_missed) %>%
arrange(subject, block) %>% slice(which.max(cannonballs_tot))
View(distinct)
table(cannon_data$subject)
distinct <- cannon_data %>%
group_by(subject, block, trialnum) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))) %>% ##change needed things to numeric
mutate(cannonballs_tot = cannonballs_caught + cannonballs_missed)
distinct <- cannon_data %>%
group_by(subject, block, trialnum) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))) %>% ##change needed things to numeric
mutate(cannonballs_tot = cannonballs_caught + cannonballs_missed) %>%
arrange(subject, block, trialnum) %>% slice(which.max(cannonballs_tot))
View(distinct)
distinct <- cannon_data %>%
group_by(subject, block, trialnum) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))) %>% ##change needed things to numeric
mutate(cannonballs_tot = cannonballs_caught + cannonballs_missed) %>%
arrange(subject, block, trialnum, cannonballs_tot) %>% slice(which.max(cannonballs_tot))
View(distinct)
distinct <- cannon_data %>%
group_by(subject, block, trialnum) %>% ##group by subject and block to prevent weirdness
mutate_all(function(x) as.numeric(as.character(x))) %>% ##change needed things to numeric
mutate(cannonballs_tot = as.numeric(cannonballs_caught + cannonballs_missed)) %>%
arrange(subject, block, trialnum, cannonballs_tot) %>% slice(which.max(cannonballs_tot))
View(distinct)
View(cannon_data)
>>>>>>> 3e535b9bd177584ae6e79efe9d65d405c248e3cb
